image: node:latest

.standard-rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Only needed when using docker container to run the tests.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
services:
  - mysql:latest
  - redis:latest
  - postgres:latest

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres


cache:
  paths:
    - node_modules/

stages:
  - install
  - build
  - lint
  - test
  - deploy

install_dependencies:
  extends:
    - .standard-rules
  stage: install
  script:
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines

build:
  extends:
    - .standard-rules
  stage: build
  script:
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - npm run build

lint:
  extends:
    - .standard-rules
  stage: lint
  script:
    - npm install eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
    - npm run lint
  allow_failure: false #for now we arent allowing failure as we want to be very strict with formatting however we can change this in future

test_submit:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - set NODE_OPTIONS=--max_old_space_size=4096
    - npm run test-ci -t SUBMIT

test_approved:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - set NODE_OPTIONS=--max_old_space_size=4096
    - npm run test-ci -t APPROVED

test_fca_individual:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}\n
      FCA_CHECK=${FCA_CHECK}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - set NODE_OPTIONS=--max_old_space_size=4096
    - npm run test-ci -t FCA_INDIVIDUAL

test_error_fca:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      NODE_ENV=${NODE_ENV}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - set NODE_OPTIONS=--max_old_space_size=4096
    - npm run test-ci -t ERROR_FCA

test_upload:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      NODE_ENV=${NODE_ENV}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - set NODE_OPTIONS=--max_old_space_size=4096
    - npm run test-ci -t UPLOAD

test_frontend:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm run test-ci -t FRONTEND

test_database:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - npm run test-ci -t DATABASE

test_authentication:
  extends:
    - .standard-rules
  stage: test
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - npm install
    - npm install nodejs-polars-linux-x64-gnu #we have to manually install linux version of polars since we are coding on windows machines
    - npm run test-ci -t AUTHENTICATION

deploy_staging:
  stage: deploy
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - echo "this is where we would deploy to a staging environment"
  only:
    - development

deploy_production:
  stage: deploy
  only:
    - main
  script:
    - >
      echo -e "API_KEY_FCA=${FCA_API_KEY}\n
      API_KEY=${API_KEY}\n
      CI=${CI}" >> ".env"
    - echo "this is where we would deploy to a production environment"
  environment: production
